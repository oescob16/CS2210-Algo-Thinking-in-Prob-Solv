The Problem:
  Given a square array of integers A, we want the minimum sum of a falling path through A.
  A falling path starts at any element in the first row, and chooses one element from each row. 
  The next row's choice must be in a column that is different from the previous row's column by at most one.
  
1. Define the problem/solution recursively

- From the starting point we have to find which path has the less cost to get to the last row and then return the minimum cost.
- The starting point is always going to be any jth column from the first row, so our starting points are at A[0][j]
- From the starting points we can only move one step to the down->left (A[i+1][j-1]), down (A[i+1][j]), or down->right (A[i+1][j+1]).
- From those three posible choices we have to choose which one has the less cost to go down, so min(down-left,down,down-right).
- After we get to the last row we have to backtrack (acumulate the cost from that path).

- Edge/Base Cases:
- If we are at the first column and we go to the left (index out of bounds), return 0 (do nothing)
- If we are at the last column and we to right (index out of bounds), return 0 (do nothing)
- If we are in the last row, backtrack and acumulate the path's cost (cumulative sum).

- For example, if we have this input:
[ [1,2,3],
  [4,5,6],
  [7,8,9] ]
  
- We can go in this 17 directions (because we tried aprox. O(3^n) combinations of possible paths):
  • [1,4,7], [1,4,8], [1,5,7], [1,5,8], [1,5,9]
  • [2,4,7], [2,4,8], [2,5,7], [2,5,8], [2,5,9], [2,6,8], [2,6,9]
  • [3,5,7], [3,5,8], [3,5,9], [3,6,8], [3,6,9]
  
 - After the cumulative sum of all of those paths we have to see which one has the less cost and return it.
 
 However, there is a lot of repeated work, for example:
  - In the paths [1,4,7], [2,4,7], and [3,4,7] we repeat the sub-path (sub-problem) [4,7]
  - In the paths [1,5,7] and [2,5,7] we repeat the sub-path [5,7]
 
 2. Briefly talk about how you plan to store solutions to sub-problems and combining them to solve the global problem
 
 - So, we have to make use of a data structure that can help us avoid repeated work.
 - If we think about it, to solve this problem non-recursively we have to take into consideration three things:
    • The Edge/Base Cases,
    • Path directions (left,down,right),
    • Cumulative sum,
    • Min(Cumulative Sum).
 - If we want to store the min(cumulative sum) from each direction we would have to use a dp 2d array, 
   where entry dp[i][j] is the minimum cumulative sum coming from each direction, so min(dp[i-1][j],dp[i][j],dp[i][j+1]). In addition, the entries dp[i][j] also means 
   what our min fall path cost is if we are at that position, these are the sub-problems.
   For example:
        [1,2,3]
   dp = [5,6,8] 
        [11,12,14]
   Subproblems:
   dp[1][0] = 5 is the min fall path cost when path=[1,4] 
   dp[1][2] = 6 is the min fall path cost when path=[2,4]
   dp[1][2] = 8 is the min fall path cost when path=[3,5] 
   
   
 - However, before doing anything we have to first have values to start making the min(cumulative sum), that is, fill the first row of dp with the first row of A. 
   In other words, dp[0][:]=A[0][:]
 - Since, we we want to get each sub-problem of the problem, we would start from the first row to all of the array.
 - To avoid the index-out-of-bound exception we need to use if-conditions, that checks if our j<0 or j>=len(A[0]) we assign left = right = math.inf.
 - Then, we would assign dp[i][j]=min(dp[i][j-1],dp[i][j],dp[i][j+1]
 - Finally our output would be in the last row, so we would only have to find the minimum of that row and return it.
 
 3. Talk about how you used IDEAL and Duke 7 to tackle the problem
 IDEAL:
 I: The problem is asking to find the minimum path from first row to last row, we are only allowed to move one step down-left, down, or down-right.
 D: The goal is to return an integer representing the minimum falling path and to avoid repeated computations by using dynamic programming.
 E: Given the input I tried to use it to try all the combinations and min(Cumulative sum) to solve the problem in a dp 2d array.
 A: I tried to come up with other inputs to trace it and check if tracing result gave me the expected output.
 L: Once I solved the problem I realized that even though I know many stuff about programming there are a lot many techniques to learn, I have to improve in DFS, BFS, and DP.
 
 Duke 7 Steps:
 1. I used the given input and output.
 2. I traced how the problem is going to behave (pattern) with the input to give us the output.
 3. I noticed that once we go to other column there is unnecesary computation (repeated work).
 4. I traced (OneNote) my attempted solution (pseudo-code) to see if it would work with the given input.
 5. I translated succesfully my code.
 6. I ran other scenario that I traced to check if it gave me the desired output.
 7. I rename some variables, remove unnecesary lines, I applied some one-liners, and use libraries.
