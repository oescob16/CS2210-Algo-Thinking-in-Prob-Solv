The problem:
  A sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.
  Create a function that returns the number of arithmetic slices in A.

1. Define the problem/solution recursively
  - We can make a slice of the big problem in bunch of sub-problems, that is,to reduce the scope/array by one until we get to a sequence that is three. 
  - Then we have to check if the subproblem is a valid arithmetic sequence, if it return 1, else 0. If the childs of a parent are true, then add +1 to the returned values.
  - For example, if we have A=[1,2,3,4,5], the subproblems are the following:
                 _____[1,2,3,4,5]_____
                /                     \
       (3) [1,2,3,4]               [2,3,4,5] (2)    
           /       \               /       \
   (1) [1,2,3]  [2,3,4] (1) (0) [2,3,4]   [3,4,5] (1)
  
  - Since [1,2,3] and [2,3,4] are valid, then the big problem [1,2,3,4] is also valid, so we will add 2+1=3.
  - Since [2,3,4] and [3,4,5] are valid, then the big problem [2,3,4,5] is also valid, so we will add 1+1=2. However, we already computed [2,3,4] so we return 0.
  - Since [1,2,3,4] and [2,3,4,5] are both a valid sequence, then we will add 3+2+1=6
  
  Edge/Base Case:
  - When len(A)<3, return/store 0
  - When len(A)==3 and the difference between two consecutive numbers is not the same, return/store 0.

2. Briefly talk about how you plan to store solutions to sub-problems and combining them to solve the global problem

  - Given the recursion tree we can use an array that stores the cumulative sum to represent the backtrack of the recursion from its children to its parent.
  - DP array will be of size n+1 (to include 0) and it will be a zero array.
  - Also, we have to handle the cases when len(A)<3, so dp[0]=dp[1]=0. Then we will start iteration at index 2.
  - For example:
    A=[1,2,3,4,5]
    dp[0]=dp[1]=0 -> [0,0,0,0,0,0]
    if (2-1)==(3-1), valid sequence, then dp[2]=dp[1]+1=1 -> [0,0,1,0,0,0]
    if (4-3)==(3-2), valid sequence, then dp[3]=dp[2]+1=2 -> [0,0,1,2,0,0]
    if (5-4)==(4-3), valid sequence, then dp[4]=dp[3]+1=3 -> [0,0,1,2,3,0]
     
  - Now we have to sum all of the cumulative sums (backtrack) from the dp array, so when we add 1+2+3=6 that will be our final answer.
     
3. Talk about how you used IDEAL and Duke 7 to tackle the problem

IDEAL:
 I: The problem is asking to find how many arithmetic sequences are is in an array A.
 D: The goal is to return an integer representing the total amount of valid arithmetic sequences and to avoid repeated computation.
 E: Given the input [1,2,3,4] I tried to find all possible arithmetic sequences in there, then I tried to find the relation between the smallest problem to the biggest one.
 A: I tried to come up with other inputs to trace it and check if tracing result gave me the expected output.
 L: Once I solved the problem I realized that even though I know many stuff about programming there are a lot many techniques to learn, I have to improve in DFS, BFS, and DP.
 
 Duke 7 Steps:
 1. I used the given input and output.
 2. I traced how the problem is going to behave (pattern) with the input to give us the output.
 3. I noticed that once we go to other column there is unnecesary computation (repeated work).
 4. I traced (OneNote) my attempted solution (pseudo-code) to see if it would work with the given input.
 5. I translated succesfully my code.
 6. I ran other scenario that I traced to check if it gave me the desired output.
 7. I rename some variables, remove unnecesary lines, I applied some one-liners, and use libraries.
