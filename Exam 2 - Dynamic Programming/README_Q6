The problem:
 Given a positive integer n, break it into the sum of at least two positive integers and maximize the product of those integers. 
 Return the maximum product you can get.
 
1. Define the problem/solution recursively

- This problem has the purpose of breaking a number n into two numbers that when added are n, then we have to find the maximum product of those breaking numbers.
  For instance, if we have n=4 the recursion tree will be as follows:
  
                                                ________________5________________
                                               /        |             |          \
                                            1 * 4     2 * 3         3 * 2     4  *  1
                                               / \    |   |         |   |    / \
                                             3*1 2*2  1   2         2   1  3*1 2*2 
                                             |   | |                       |   | |
                                             2   1 1                       2   1 1
                                             
- As we can see there is a lot of repeated computation and that's evident in the halves of the tree, what we have in one side we also have it in the other side.
  In addition we are abble to see that the base cases would be 1 and 2, since when we are breaking a number repeteadly we will always get either a 1 
  (that comes from a 2 and 1) or a 2 (that comes from a 3).
  
- Edge/Base Cases:
  When n==1 or n==2 return 1
  When n==3 return 2
  
- I can conclude that the recursion part will be when breaking a number into the sum of two integers until we get to a 3, 2, or 1.
- Also, we can se that the solution is 3*2*1, which are the leaves.
 
2. Briefly talk about how you plan to store solutions to sub-problems and combining them to solve the global problem

If we analyze the recursion tree we can analyze multiple things:
1. We have to get the previous max value associated with the current number we are breaking, so dp[i]. For instance, dp[4]=3
2. We have to get the previous previous max value * current number, so dp[i-j]*j. For instance, dp[4-2]=dp[2]=1*1*2=2. 
3. We have to get the current max value associated with the current numbers in which we are, so (i-j)*j. For instance, (4-2)*2=4.

Then, we have to compute the maximum of those 3 computations n^2 times, until we get to the maximum value. So, dp[i]=max(prev_max1,prev_max2,curr_max)

3. Talk about how you used IDEAL and Duke 7 to tackle the problem

IDEAL:
 I: The problem is asking to find the maximum product when we break over and over n number that add up to its sum.
 D: The goal is to return the max product of integer n and to avoid repeated computations.
 E: Given the input 1,2,3,4,5 I tried to break those integers into 2 integers that add up and then compute the mas value, after that I tried to find a pattern.
 A: I tried to come up with other inputs to trace it and check if tracing result gave me the expected output.
 L: Once I solved the problem I realized that even though I know many stuff about programming there are a lot many techniques to learn, I have to improve in DFS, BFS, and DP.
 
 Duke 7 Steps:
 1. I used the given input and output.
 2. I traced how the problem is going to behave (pattern) with the input to give us the output.
 3. I noticed that once we go to other column there is unnecesary computation (repeated work).
 4. I traced (OneNote) my attempted solution (pseudo-code) to see if it would work with the given input.
 5. I translated succesfully my code.
 6. I ran other scenario that I traced to check if it gave me the desired output.
 7. I rename some variables, remove unnecesary lines, I applied some one-liners, and use libraries.
